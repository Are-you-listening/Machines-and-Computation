auto cfg = createCFG();
    ParseTree* CL1  = new ParseTree({},"{");
    ParseTree* CR1  = new ParseTree({},"}");
    ParseTree* CL2  = new ParseTree({},"{");
    ParseTree* CR2  = new ParseTree({},"}");
    ParseTree* CL3  = new ParseTree({},"{");
    ParseTree* CR3  = new ParseTree({},"}");

    ParseTree* f  = new ParseTree({},"f");
    ParseTree* c  = new ParseTree({},"c");
    ParseTree* b  = new ParseTree({},"b");

    ParseTree* I = new ParseTree({CR3},"I");
    ParseTree* H = new ParseTree({CL3,I},"H");
    ParseTree* G = new ParseTree({CR2},"G");
    ParseTree* F = new ParseTree({f,G},"F");
    ParseTree* E = new ParseTree({CR1},"E");
    ParseTree* D = new ParseTree({CL2,F},"D");
    ParseTree* C = new ParseTree({c,D,E},"C");
    ParseTree* B = new ParseTree({CL1,C,H},"B");
    ParseTree* A = new ParseTree( {b,B}, "A" );

    CFG a = *cfg;
    LALR lalr(a);
    const std::vector<std::string> t = {"{","}","b","c","d","e","s","k","m","l","f"};
    a.setT(t);
    lalr._root = A;
    lalr._cfg.setT(t);
    A->matchBrackets(t);
    std::cout << std::endl;