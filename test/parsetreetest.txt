auto cfg = createCFG();
    auto cfg3 = createCFG();
    CFG cfg2("input/CFG/testGNF.json");
    cfg2.setCnf(true);
    cfg2.toGNF();
    cfg2.print();
    cfg->print();
    cfg->toGNF(); // this still needs massive debugging.
    cfg->print();
    //cfg->toCNF();
    cfg3->toCNF();

    ParseTree* b = new ParseTree({},"b");
    ParseTree* CL  = new ParseTree({},"{");
    ParseTree* c  = new ParseTree({},"c");
    ParseTree* d  = new ParseTree({},"d");
    ParseTree* CR  = new ParseTree({},"}");
    ParseTree* s  = new ParseTree({},"s");
    ParseTree* k  = new ParseTree({},"k");
    ParseTree* e  = new ParseTree({},"e");

    ParseTree* S = new ParseTree({s},"S");
    ParseTree* K = new ParseTree({k,S},"K");
    ParseTree* E = new ParseTree({e,K,CR},"E");
    ParseTree* D = new ParseTree({d},"D");
    ParseTree* C = new ParseTree({c,D},"C");
    ParseTree* B = new ParseTree({CL,C,E},"B");
    ParseTree* A = new ParseTree( {b,B}, "A" );

    CFG a = *cfg;
    LALR lalr(a);
    const std::vector<std::string> t = {"{","}","b","c","d","e","s","k"};
    a.setT(t);
    lalr._root = A;
    lalr._cfg.setT(t);
    std::cout << std::endl;
    lalr.cleanUp();
    std::cout << "y" << std::endl;